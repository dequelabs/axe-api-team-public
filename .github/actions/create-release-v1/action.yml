name: Create release
description: A GitHub Action to create a production release

inputs:
  token:
    description: The GitHub token to use. Defaults to GITHUB_TOKEN
    default: ${{ github.token }}
  base:
    description: The base branch to merge into
    required: true
  migrations-dir:
    description: The directory where the SQL migration files live e.g. src/database/migrations
  env-file-path:
    description: The path to the .env file e.g. src/service/sample.env

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        # Fetch all history
        fetch-depth: 0

    - name: Is release in progress
      uses: dequelabs/axe-api-team-public/.github/actions/is-release-in-progress-v1@main
      id: is_release_in_progress
      with:
        github-token: ${{ inputs.token }}

    - name: Cancel release if a release is already in progress
      shell: bash
      if: ${{ steps.is_release_in_progress.outputs.in_progress == 'true' }}
      run: |
        echo "A release is already in progress. Cancelling this release."
        gh run cancel ${{ github.run_id }}
        gh run watch ${{ github.run_id }}

    - name: Get release version
      shell: bash
      run: |
        git checkout release

        # Get the version number from the prepare_release shell script and set it as an output
        # Monorepos have a lerna.json file that contains the updated version number
        # Non-monorepos, or non-npm repos, have a package.json file that contains the updated version number
        if [ -f "lerna.json" ]; then
          echo "RELEASE_VERSION=$(cat lerna.json | jq -r '.version')" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_VERSION=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
        fi

    - name: Generate PR Body and create PR
      shell: bash
      run: |
        echo "# <insert_release_notes_if_required>" >> /tmp/release-notes.txt
        echo "" >> /tmp/release-notes.txt

        if [ -z "${{ inputs.migrations-dir }}" ]; then
          echo "No migrations directory provided. Skipping migrations check"
        else
          repo_url="https://github.com/$GITHUB_REPOSITORY"

          echo "Checking for new migration files in ${{ inputs.migrations-dir }}"
          echo "Repo url: $repo_url"

          # Only get new files added to release branch that are within the provided migrations directory and end in .sql
          new_migration_files=$(git diff --name-only --diff-filter=A  origin/${{ inputs.base }}...origin/release -- "${{ inputs.migrations-dir }}" | grep -E '\.sql$')

          if [ -z "$new_migration_files" ]; then
            echo "## No new migration files found" >> /tmp/release-notes.txt
          else
            echo "## New migration files found:" >> /tmp/release-notes.txt
            
            for file in $new_migration_files; do
              url="$repo_url/blob/$GITHUB_SHA/$file"
              echo "- [$file]($url)" >> /tmp/release-notes.txt
            done

            echo "" >> /tmp/release-notes.txt
          fi
        fi

        if [ -z "${{ inputs.env-file-path }}" ]; then
          echo "No .env file path provided. Skipping .env file changes check"
        else
          echo "Checking for new environment variables in $env_file_path"

          # Get new environment variables added to release branch that are within the provided env file path
          # 1. Extract new ENV vars (exclude comments and empty lines) .e.g. +NEW_ENV_VAR=123
          # 2. use sed to remove the + at the start and assigned value e.g. final output: NEW_ENV_VAR
          new_env_vars=$(git diff origin/${{ inputs.base }}...origin/release -- "${{ inputs.env-file-path }}" | grep -E '^\+.*=' | sed -e 's/^\+//g' | sed -e 's/=.*//g')

          if [ -z "$new_env_vars" ]; then
            echo "## No new environment variables found" >> /tmp/release-notes.txt
          else
            echo "## New environment variables found:" >> /tmp/release-notes.txt
            
            for var in $new_env_vars; do
              echo "- $var" >> /tmp/release-notes.txt
            done

            echo "" >> /tmp/release-notes.txt
          fi
        fi

        gh pr create \
          --title "chore: release v$RELEASE_VERSION" \
          --body-file /tmp/release-notes.txt \
          --base ${{ inputs.base }} \
          --head release
      env:
        GH_TOKEN: ${{ inputs.token }}
